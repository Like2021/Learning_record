# 2022.07.24
# 查看docker版本信息
docker -v
docker version

# docker系统信息
docker info

# 从镜像仓库查找镜像
docker search ubuntu

# 下载镜像
docker pull ubuntu

# 查看本地镜像
docker images

# 给本地镜像做标记
docker tag ubuntu:latest ubuntu1:v1.0

# 通过镜像创建并启动一个容器 --name:设置容器名称；--i：以交互模式运行容器；-t:为容器分配一个伪终端
docker run --name ubuntu_test -it ubuntu /bin/bash

# 以后台方式创建并启动一个容器
docker run --name ubuntu_test -d ubuntu

# 将容器上80端口映射到主机随机端口
docker run -P -d ubuntu:v1.0

# 使用-p参数指定映射端口(主机端口：容器端口)，使用-v参数指定映射目录（主机目录：容器目录）
docker run -p 8081:80 -v /data_test:/data -d ubuntu:v1.0
 
# 查看所有容器信息
docker ps -a

# 查看运行中的容器
docker ps # NAMES:自动分配的容器名称

# 查看所有容器ID
docker ps -a -q

# 启动、停止、重启容器
docker start CONTAINER ID
docker stop CONTAINER ID
docker restart CONTAINER ID

# 进入正在运行的容器
docker attach CONTAINER ID

# 让docker后台运行的快捷键
ctrl+p+q

# 删除容器
docker rm NAMES
docker rm -f -v NAMES # -f：强制删除正在运行的容器  -v：删除与容器关联的数据卷

# 删除镜像
docker rmi IMAGE ID
docker rmi -f IMAGE ID # -f: 强制删除镜像，即使镜像运行中

# 杀掉一个运行中的容器
docker kill -s KILL NAMES # -s: 表示向容器发送一个KILL信号
 
# 更改镜像后保存为新的镜像命令
docker commit 容器ID 新镜像名

# 将镜像保存至磁盘
docker save -o tensorflow.tar tensorflow/tensorflow:1.8.0-devel-gpu-py3

# 将磁盘镜像加载进来
docker load --input tensorflow.tar

#----------------------------------------------------------------------------
# 2022.7.25
# 查看所有docker命令
docker

# 拉取docker镜像
docker pull ubuntu

